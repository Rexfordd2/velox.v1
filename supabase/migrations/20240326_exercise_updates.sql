-- Add new columns to exercises table
ALTER TABLE public.exercises
    ADD COLUMN IF NOT EXISTS slug text UNIQUE,
    ADD COLUMN IF NOT EXISTS primary_muscle text,
    ADD COLUMN IF NOT EXISTS secondary_muscles text[],
    ADD COLUMN IF NOT EXISTS video_demo_url text,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMP WITH TIME ZONE;

-- Add check constraint for difficulty
ALTER TABLE public.exercises
    DROP CONSTRAINT IF EXISTS exercises_difficulty_check,
    ADD CONSTRAINT exercises_difficulty_check 
    CHECK (difficulty in ('beginner','intermediate','advanced'));

-- Create exercise_categories table
CREATE TABLE IF NOT EXISTS public.exercise_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create exercise_to_category pivot table
CREATE TABLE IF NOT EXISTS public.exercise_to_category (
    exercise_id BIGINT REFERENCES public.exercises(id) ON DELETE CASCADE,
    category_id BIGINT REFERENCES public.exercise_categories(id) ON DELETE CASCADE,
    PRIMARY KEY (exercise_id, category_id)
);

-- Create admin_users table if not exists
CREATE TABLE IF NOT EXISTS public.admin_users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Update RLS policies
DROP POLICY IF EXISTS "Allow public read access" ON public.exercises;
DROP POLICY IF EXISTS "Allow authenticated users to insert/update" ON public.exercises;

CREATE POLICY "Allow public read access" ON public.exercises
    FOR SELECT
    USING (true);

CREATE POLICY "Allow admin write access" ON public.exercises
    FOR ALL
    USING (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    )
    WITH CHECK (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    );

-- Enable RLS on new tables
ALTER TABLE public.exercise_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exercise_to_category ENABLE ROW LEVEL SECURITY;

-- Create policies for exercise_categories
CREATE POLICY "Allow public read access" ON public.exercise_categories
    FOR SELECT
    USING (true);

CREATE POLICY "Allow admin write access" ON public.exercise_categories
    FOR ALL
    USING (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    )
    WITH CHECK (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    );

-- Create policies for exercise_to_category
CREATE POLICY "Allow public read access" ON public.exercise_to_category
    FOR SELECT
    USING (true);

CREATE POLICY "Allow admin write access" ON public.exercise_to_category
    FOR ALL
    USING (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    )
    WITH CHECK (
        auth.role() = 'service_role' OR 
        auth.uid() IN (SELECT id FROM public.admin_users)
    );

-- Soft-delete comment: Instead of removing, set deleted_at = now() where appropriate. 